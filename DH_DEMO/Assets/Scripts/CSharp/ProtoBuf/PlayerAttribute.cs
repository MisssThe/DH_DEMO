// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerAttribute.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network {

  /// <summary>Holder for reflection information generated from PlayerAttribute.proto</summary>
  public static partial class PlayerAttributeReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerAttribute.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerAttributeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQbGF5ZXJBdHRyaWJ1dGUucHJvdG8SB25ldHdvcmsiWgoPUGxheWVyQXR0",
            "cmlidXRlEg4KBm15TmFtZRgBIAEoCRIRCglwb3NpdGlvbngYAiABKAISEQoJ",
            "cG9zaXRpb256GAMgASgCEhEKCXJvdGF0aW9ueRgEIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.PlayerAttribute), global::Network.PlayerAttribute.Parser, new[]{ "MyName", "Positionx", "Positionz", "Rotationy" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerAttribute : pb::IMessage<PlayerAttribute> {
    private static readonly pb::MessageParser<PlayerAttribute> _parser = new pb::MessageParser<PlayerAttribute>(() => new PlayerAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.PlayerAttributeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttribute(PlayerAttribute other) : this() {
      myName_ = other.myName_;
      positionx_ = other.positionx_;
      positionz_ = other.positionz_;
      rotationy_ = other.rotationy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttribute Clone() {
      return new PlayerAttribute(this);
    }

    /// <summary>Field number for the "myName" field.</summary>
    public const int MyNameFieldNumber = 1;
    private string myName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyName {
      get { return myName_; }
      set {
        myName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positionx" field.</summary>
    public const int PositionxFieldNumber = 2;
    private float positionx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Positionx {
      get { return positionx_; }
      set {
        positionx_ = value;
      }
    }

    /// <summary>Field number for the "positionz" field.</summary>
    public const int PositionzFieldNumber = 3;
    private float positionz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Positionz {
      get { return positionz_; }
      set {
        positionz_ = value;
      }
    }

    /// <summary>Field number for the "rotationy" field.</summary>
    public const int RotationyFieldNumber = 4;
    private float rotationy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotationy {
      get { return rotationy_; }
      set {
        rotationy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyName != other.MyName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Positionx, other.Positionx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Positionz, other.Positionz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotationy, other.Rotationy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MyName.Length != 0) hash ^= MyName.GetHashCode();
      if (Positionx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Positionx);
      if (Positionz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Positionz);
      if (Rotationy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotationy);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MyName);
      }
      if (Positionx != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Positionx);
      }
      if (Positionz != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Positionz);
      }
      if (Rotationy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Rotationy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyName);
      }
      if (Positionx != 0F) {
        size += 1 + 4;
      }
      if (Positionz != 0F) {
        size += 1 + 4;
      }
      if (Rotationy != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAttribute other) {
      if (other == null) {
        return;
      }
      if (other.MyName.Length != 0) {
        MyName = other.MyName;
      }
      if (other.Positionx != 0F) {
        Positionx = other.Positionx;
      }
      if (other.Positionz != 0F) {
        Positionz = other.Positionz;
      }
      if (other.Rotationy != 0F) {
        Rotationy = other.Rotationy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MyName = input.ReadString();
            break;
          }
          case 21: {
            Positionx = input.ReadFloat();
            break;
          }
          case 29: {
            Positionz = input.ReadFloat();
            break;
          }
          case 37: {
            Rotationy = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
