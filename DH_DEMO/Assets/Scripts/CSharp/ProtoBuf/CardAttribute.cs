// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CardAttribute.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network {

  /// <summary>Holder for reflection information generated from CardAttribute.proto</summary>
  public static partial class CardAttributeReflection {

    #region Descriptor
    /// <summary>File descriptor for CardAttribute.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardAttributeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDYXJkQXR0cmlidXRlLnByb3RvEgduZXR3b3JrItIBCg1DYXJkQXR0cmli",
            "dXRlEg4KBm1heF9ocBgBIAEoBRIOCgZtYXhfbXAYAiABKAUSDgoGbWF4X2Rw",
            "GAMgASgFEg4KBm9uZV9zcBgEIAEoBRIPCgduZWVkX3NwGAUgASgFEhAKCGNh",
            "cmRfbnVtGAYgASgFEjAKBWNhcmRzGAcgAygLMiEubmV0d29yay5DYXJkQXR0",
            "cmlidXRlLkNhcmRzRW50cnkaLAoKQ2FyZHNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAU6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.CardAttribute), global::Network.CardAttribute.Parser, new[]{ "MaxHp", "MaxMp", "MaxDp", "OneSp", "NeedSp", "CardNum", "Cards" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CardAttribute : pb::IMessage<CardAttribute> {
    private static readonly pb::MessageParser<CardAttribute> _parser = new pb::MessageParser<CardAttribute>(() => new CardAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.CardAttributeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAttribute(CardAttribute other) : this() {
      maxHp_ = other.maxHp_;
      maxMp_ = other.maxMp_;
      maxDp_ = other.maxDp_;
      oneSp_ = other.oneSp_;
      needSp_ = other.needSp_;
      cardNum_ = other.cardNum_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAttribute Clone() {
      return new CardAttribute(this);
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 1;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "max_mp" field.</summary>
    public const int MaxMpFieldNumber = 2;
    private int maxMp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    /// <summary>Field number for the "max_dp" field.</summary>
    public const int MaxDpFieldNumber = 3;
    private int maxDp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDp {
      get { return maxDp_; }
      set {
        maxDp_ = value;
      }
    }

    /// <summary>Field number for the "one_sp" field.</summary>
    public const int OneSpFieldNumber = 4;
    private int oneSp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OneSp {
      get { return oneSp_; }
      set {
        oneSp_ = value;
      }
    }

    /// <summary>Field number for the "need_sp" field.</summary>
    public const int NeedSpFieldNumber = 5;
    private int needSp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedSp {
      get { return needSp_; }
      set {
        needSp_ = value;
      }
    }

    /// <summary>Field number for the "card_num" field.</summary>
    public const int CardNumFieldNumber = 6;
    private int cardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardNum {
      get { return cardNum_; }
      set {
        cardNum_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 7;
    private static readonly pbc::MapField<string, int>.Codec _map_cards_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 58);
    private readonly pbc::MapField<string, int> cards_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxHp != other.MaxHp) return false;
      if (MaxMp != other.MaxMp) return false;
      if (MaxDp != other.MaxDp) return false;
      if (OneSp != other.OneSp) return false;
      if (NeedSp != other.NeedSp) return false;
      if (CardNum != other.CardNum) return false;
      if (!Cards.Equals(other.Cards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (MaxMp != 0) hash ^= MaxMp.GetHashCode();
      if (MaxDp != 0) hash ^= MaxDp.GetHashCode();
      if (OneSp != 0) hash ^= OneSp.GetHashCode();
      if (NeedSp != 0) hash ^= NeedSp.GetHashCode();
      if (CardNum != 0) hash ^= CardNum.GetHashCode();
      hash ^= Cards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxHp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxHp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxMp);
      }
      if (MaxDp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxDp);
      }
      if (OneSp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OneSp);
      }
      if (NeedSp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NeedSp);
      }
      if (CardNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardNum);
      }
      cards_.WriteTo(output, _map_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      if (MaxDp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDp);
      }
      if (OneSp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OneSp);
      }
      if (NeedSp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedSp);
      }
      if (CardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardNum);
      }
      size += cards_.CalculateSize(_map_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAttribute other) {
      if (other == null) {
        return;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.MaxMp != 0) {
        MaxMp = other.MaxMp;
      }
      if (other.MaxDp != 0) {
        MaxDp = other.MaxDp;
      }
      if (other.OneSp != 0) {
        OneSp = other.OneSp;
      }
      if (other.NeedSp != 0) {
        NeedSp = other.NeedSp;
      }
      if (other.CardNum != 0) {
        CardNum = other.CardNum;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 16: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 24: {
            MaxDp = input.ReadInt32();
            break;
          }
          case 32: {
            OneSp = input.ReadInt32();
            break;
          }
          case 40: {
            NeedSp = input.ReadInt32();
            break;
          }
          case 48: {
            CardNum = input.ReadInt32();
            break;
          }
          case 58: {
            cards_.AddEntriesFrom(input, _map_cards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
